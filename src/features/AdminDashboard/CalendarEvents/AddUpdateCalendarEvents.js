import React, {useState, useContext, useEffect} from 'react';
import * as firebase from 'firebase/app';
import 'firebase/firestore';
import 'firebase/storage';

import moment from 'moment';

import {Modal, Button} from 'react-bootstrap';
import {AuthContext} from '../../Auth/AuthContext';
import {useHistory, useLocation} from 'react-router-dom';
import {AlertMessageContext} from '../../../components/common/AlertMessageContext/AlertMessageContext';
import useForm from '../../../hooks/useForm';

export default function AddUpdateCalendarEvents(props) {
    const db = firebase.firestore();
    const history = useHistory();

    const location = useLocation();

    const {user} = useContext(AuthContext);
    const {setAlertMessage} = useContext(AlertMessageContext);

    const [id, setId] = useState();

    useEffect(() => {
        setId(new URLSearchParams(location.search).get('id'));
    }, [location]);

    const [file, setFile] = useState('');

    const handleClose = () => {
        setInitialValues({
            title: '',
            description: '',
            imageUrl: '',
            start: '',
            allDay: true,
        });
        props.setShow(false);
        history.push('/admin');
    };

    const [initialValues, setInitialValues] = useState({
        title: '',
        description: '',
        imageUrl: '',
        start: moment().format(),
        allDay: true,
    });

    const validationRules = {
        title: [{type: 'required'}],
        description: [{type: 'required'}],
    };

    const [calendarEvent, errors, bindInput, isFormValid] = useForm(initialValues, validationRules);

    useEffect(() => {
        if (!id) {
            return;
        }
        // Access collection with name 'calendarEvents' then get document with autogenerated id
        const unsub = db
            .collection('calendarEvents')
            .doc(id)
            .onSnapshot(res => {
                setInitialValues(res.data());
            });
        return unsub;
    }, [db, id]);

    function handleFileUpload(e) {
        setFile(e.target.files[0]);
        const fr = new FileReader();
        fr.readAsDataURL(e.target.files[0]);
        fr.onload = ({target: {result}}) => setInitialValues({...calendarEvent, imageUrl: result});
    }

    async function handleAddCalendarEvent() {
        if (!isFormValid()) {
            return;
        }

        if (user && calendarEvent.title) {
            let imageUrl = '';
            try {
                if (file) {
                    const imageRef = firebase
                        .storage()
                        .ref()
                        .child(`images/${Math.floor(Math.random() * 10000) + file.name}`);
                    const snapshot = await imageRef.put(file);
                    imageUrl = await snapshot.ref.getDownloadURL();
                }

                await db.collection('calendarEvents').add({
                    title: calendarEvent.title,
                    description: calendarEvent.description,
                    imageUrl: imageUrl,
                    start: moment().format(),
                    allDay: true,
                });

                setAlertMessage({
                    message: 'Event successfully added!',
                    type: 'success',
                });
            } catch (error) {
                setAlertMessage({
                    message: error.message,
                    type: 'danger',
                });
            }
        }
        handleClose();
    }

    async function handleUpdateCalendarEvent(item) {
        if (!isFormValid()) {
            return;
        }

        try {
            await db
                .collection('calendarEvents')
                .doc(id)
                .update({
                    ...item,
                    title: item.title,
                    description: item.description,
                    imageUrl: item.imageUrl,
                });

            setAlertMessage({
                message: 'Event successfully updated!',
                type: 'success',
            });
            history.push('/admin');
        } catch (error) {
            setAlertMessage({
                message: error.message,
                type: 'danger',
            });
        }
        handleClose();
    }

    return (
        <>
            <Modal animation={false} show={props.show} onHide={handleClose}>
                <Modal.Header closeButton>
                    <Modal.Title>
                        <h2>{id ? 'Update event' : 'Add event'}</h2>
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <form onSubmit={id ? handleUpdateCalendarEvent : handleAddCalendarEvent}>
                        {alert && alert.message ? (
                            <div className={`alert alert-${alert.type}`} role="alert">
                                {alert.message}
                            </div>
                        ) : null}
                        <div className=" jumbotron-fluid h-100">
                            <div className="container">
                                <div className="d-flex flex-column form-group pb-3">
                                    {calendarEvent && calendarEvent.imageUrl ? (
                                        <img
                                            src={calendarEvent.imageUrl}
                                            width="200"
                                            className="rounded shadow"
                                            alt="calendarEvent"
                                        />
                                    ) : (
                                        ''
                                    )}
                                    <label>Upload an image:</label>
                                    <input className="form-control-file" type="file" onChange={handleFileUpload} />
                                </div>

                                <div className="input-group mb-3">
                                    <input
                                        type="text"
                                        className={`form-control  ${errors.title && 'is-invalid'}`}
                                        placeholder="Insert event title"
                                        name="title"
                                        value={calendarEvent.title}
                                        {...bindInput('title')}
                                    />
                                </div>

                                <div className="input-group">
                                    <textarea
                                        type="text"
                                        className={`form-control  ${errors.title && 'is-invalid'}`}
                                        id="description"
                                        name="description"
                                        placeholder="Insert event description"
                                        rows="6"
                                        value={calendarEvent.description}
                                        {...bindInput('description')}
                                    />
                                </div>
                            </div>
                        </div>
                    </form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleClose}>
                        Close
                    </Button>
                    <Button
                        variant="primary"
                        onClick={id ? () => handleUpdateCalendarEvent(calendarEvent) : handleAddCalendarEvent}
                        disabled={!calendarEvent.title}
                    >
                        Save Changes
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
}
